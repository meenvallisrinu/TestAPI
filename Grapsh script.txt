
	
flowchart LR
    A[Logs]  -->A1[Input];
    AA[/UI Screens/] --> A1;
    AAA[/Design  Document/] --> A1;
    A1 --> B[Feature Extraction];
    
    B --> C[Normalized Feature Vector]
    C --> D[Random Noise 
        Input to GAN Model ]
    D --> E[Generator G]
    E--> F[Random Test Cases]
    F --> G[Discriminator D]
    H[Real Test Cases] --> G
    G --> I[Discriminator Feedback: 
            Real/Fake]
    I --> J[Loss Calculation]
    J --> K[Update Generator 
            and Discriminator]
    K --> D
    K --> E
    K --> G

    %% Description of each node
    A1 --> L[Extract Timestamp, Event Type, Message, Requirement ];
 
    B --> M[Apply MinMaxScaler for Normalization]
 
    D --> N[Generate Final Test Cases]
    G --> O[Real or Fake?]


    classDef startend fill:#f9f,stroke:#333,stroke-width:4px;
    class A,AA,AAA,F,H,N startend;



https://scholar.google.co.in/scholar?q=patents+on+Generative+adversive+networks+on+Test+case+generation&hl=en&as_sdt=0&as_vis=1&oi=scholar

https://patents.google.com/patent/US20190286950A1/en
https://patents.google.com/patent/US20210150354A1/en
https://www.indium.tech/blog/automated-test-case-generation-using-gans/
https://www.researchgate.net/publication/326665744_Data_synthesis_based_on_generative_adversarial_networks
https://www.vldb.org/pvldb/vol11/p1071-park.pdf
